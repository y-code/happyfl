<Project Sdk="Microsoft.NET.Sdk.Web" DefaultTargets="Publish">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <RootNamespace>HappyFL</RootNamespace>

    <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
    <PublishDir>$(OutDir)_PublishedWebsites\NetCoreWebApp\</PublishDir>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.App">
      <PrivateAssets Condition="'%(PackageReference.Version)' == ''">all</PrivateAssets>
      <Publish Condition="'%(PackageReference.Version)' == ''">true</Publish>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All" />
    <PackageReference Include="Serilog" Version="2.8.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="2.1.1" />
    <PackageReference Include="Serilog.Enrichers.Environment" Version="2.1.3" />
    <PackageReference Include="Serilog.Enrichers.Thread" Version="3.1.0" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="3.1.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />
    <PackageReference Include="Certes" Version="2.3.3" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\HappyFLDB\HappyFLDB.csproj">
      <GlobalPropertiesToRemove>;WebPublishProfileFile</GlobalPropertiesToRemove>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.Development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.Docker.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Pages\Sample\" />
    <Folder Include="Models\" />
    <Folder Include="Models\WebSeeker\" />
  </ItemGroup>
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles-&gt;'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <ItemGroup>
    <Reference Include="HtmlAgilityPack">
      <HintPath>..\unsubmodule\html-agility-pack\HtmlAgilityPack.dll</HintPath>
    </Reference>
    <Reference Include="McMaster.AspNetCore.LetsEncrypt">
      <HintPath>..\unsubmodule\LetsEncrypt\McMaster.AspNetCore.LetsEncrypt.dll</HintPath>
    </Reference>
  </ItemGroup>

  <Target Name="UnsubmoduleOnDebug" BeforeTargets="Build">
    <Message Importance="High" Text="Run Unsubmodule if configuration is 'Debug'." />
    <CallTarget Condition="'$(Configuration)' == 'Debug'" Targets="Unsubmodule" />
  </Target>

  <PropertyGroup>
    <SolutionDir>$([System.IO.Path]::GetDirectoryName($(MSBuildProjectDirectory)))\</SolutionDir>
  </PropertyGroup>

  <ItemGroup>
    <HtmlAgilityPackArtifacts Include="$(SolutionDir)/html-agility-pack/src/HtmlAgilityPack.NETStandard2_0/bin/Debug/netstandard2.0/netstandard2.0/*.*" />
    <LetsEncryptArtifacts Include="$(SolutionDir)/LetsEncrypt/.build/McMaster.AspNetCore.LetsEncrypt/bin/Debug/netstandard2.0/*.*" />
  </ItemGroup>

  <Target Name="Unsubmodule">
    <Message Importance="High" Text="Copy submodule artifacts to unsubmodule dir for the use in AppHarbor.sln." />
    <MakeDir Directories="$(SolutionDir)/unsubmodule/html-agility-pack" />
    <Copy SourceFiles="@(HtmlAgilityPackArtifacts)" DestinationFolder="$(SolutionDir)/unsubmodule/html-agility-pack" />
    <MakeDir Directories="$(SolutionDir)/unsubmodule/LetsEncrypt" />
    <Copy SourceFiles="@(LetsEncryptArtifacts)" DestinationFolder="$(SolutionDir)/unsubmodule/LetsEncrypt" />
  </Target>

</Project>
